---
description: 
globs: 
alwaysApply: false
---
    hashFile(filePath) {
        return new Promise((resolve, reject) => {
            const hash = crypto.createHash("md5");
            const fileSize = fs.statSync(filePath).size;
            const fileName = filePath.split(/[/\\]/).pop();
            let bytesRead = 0;

            const stream = fs.createReadStream(filePath);
            const fileProgress = this.progress.createFileProgress(fileName, fileSize);

            stream.on("data", (chunk) => {
                bytesRead += chunk.length;
                hash.update(chunk);
                this.processedBytes += chunk.length;
                fileProgress.update(bytesRead);
                this.progress.updateTotal(this.processedBytes);
            });

            stream.on("end", () => {
                fileProgress.complete();
                resolve(hash.digest("hex"));
            });

            stream.on("error", reject);
        });
    }
        parseFilePath(filePath) {
        const normalizedPath = filePath.split('\\').join('/');
        const fileName = normalizedPath.split('/').pop();
        const directory = normalizedPath.split('/').slice(0, -1).join('/');

        return {
            id: this.hashPath(directory + '/' + fileName),
            fullname: fileName,
            directory: directory
        };
    }

    hashPath(path) {
        return crypto.createHash('md5').update(path).digest('hex');
    }